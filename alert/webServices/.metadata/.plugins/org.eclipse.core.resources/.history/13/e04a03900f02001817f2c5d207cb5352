package cl.button.panic.controller;

import java.util.HashMap;
import java.util.Map;

import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import cl.button.panic.model.Beneficiary;
import cl.button.panic.repository.BeneficiaryRepository;
import freemarker.template.Configuration;
import freemarker.template.Template;


@Controller
public class SendAlertController {

	@Autowired
	private JavaMailSender sender;
	
	@Autowired
	private Configuration freemarkerConfig;
	
	@Autowired
	private BeneficiaryRepository beneficiaryRepository;
	
	@RequestMapping("/alertMessage")
	@ResponseBody String sendMessage(@RequestParam long idUser) {
		Beneficiary beneficiary = beneficiaryRepository.findOne(idUser);
		try {
			sendEmail(beneficiary);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	private void sendEmail(Beneficiary beneficiary) throws Exception {
		MimeMessage message = sender.createMimeMessage();
		MimeMessageHelper helper = new MimeMessageHelper(message);
		Map<String, Object> model = new HashMap();
		model.put("user", "qpt");
		freemarkerConfig.setClassForTemplateLoading(this.getClass(), "/templates");
		Template t = freemarkerConfig.getTemplate("mailToBeneficiaries.ftl");
		String text = FreeMarkerTemplateUtils.processTemplateIntoString(t, model);






		// TODO Auto-generated method stub
		
	}

}
